#include <iostream>
using namespace std;

template <typename T>

class DoublyLinkedList {
    class Node {
    public:
        T value;
        Node *next;
        Node *prev;

        Node(T value = T(), Node *next = nullptr, Node *prev = nullptr) {
            this->value = value;
            this->next = next;
            this->prev = prev;
        }
    };

    int size;
    Node *head;
    Node *tail;

public:
    DoublyLinkedList() {
        size=0;
        head = nullptr;
        tail= nullptr;
    }

    int length() {
        return size;
    }

    T operator[] (int index) {
        T res = T();
        if(index <= size/2) {
            int c = 0;
            Node *cur = head;
            while (cur != nullptr) {
                if(c == index) {
                    res = cur->value;
                    break;
                }
                cur = cur->next;
                c++;
            }
        }
        else {
            int c = size-1;
            Node *cur = tail;
            while (cur != nullptr) {
                if(c == index) {
                    res = cur->value;
                    break;
                }
                cur = cur->prev;
                c--;
            }
        }
        return res;
    }

    void pushFront(T elem) {
        if(head == nullptr)
            head = new Node(elem);
        else if(size == 1) {
            Node *temp = new Node(elem, head);
            head->prev = temp;
            tail = head;
            head = temp;
        }
        else {
            Node *temp = new Node(elem, head);
            head->prev = temp;
            head = temp;
        }
        size++;
    }

    void popFront() {
        if (size <= 0)
            throw out_of_range("");
        else if (size == 1) {
            head = nullptr;
            size--;
        }
        else if (size == 2) {
            Node *temp = head;
            head = tail;
            size--;
            delete temp;
        }
        else {
            Node *temp = head;
            head = head->next;
            delete temp;
            size--;
        }
    }

    void pushBack(T elem) {
        if(head == nullptr)
            head = new Node(elem);
        else if(size==1) {
            tail = new Node(elem, nullptr, head);
            head->next = tail;
        }
        else {
            Node *temp = new Node(elem, nullptr, tail);
            tail->next = temp;
            tail = temp;
        }
        size++;
    }

    void popBack() {
        if(size <=0)
            throw out_of_range("");
        else if(size == 1) {
            head = nullptr;
            size--;
        }
        else if(size == 2) {
            tail = nullptr;
            size--;
        }
        else {
            Node *temp = tail->prev;
            delete tail;
            tail = temp;
            tail->next = nullptr;
            size--;
        }
    }

    void U(DoublyLinkedList dl1, DoublyLinkedList dl2) {
        dl1.tail->next = dl2.head;
        dl2.head->prev = dl1.tail;

        cout<<"UNION of two DLL: ";
        Node *cur = dl1.head;
        while (cur != nullptr) {
            cout<<cur->value<<" ";
            cur = cur->next;
        }
        cout<<endl;
    }

};

template <typename T>
class Queue {

    DoublyLinkedList<T> list;

public:

    void push(T element) {
        list.pushBack(element);
    }

    void pop() {
        list.popFront();
    }

    T front() { // The program should display the value of the first element without removing it from the queue
        return list[0];
    }

    void display() {
        for(int i=0; i<list.length(); i++)
            cout<<list[i]<<"  ";
    }

    int size() {
        return list.length();
    }
};

template <typename T>
class Stack {

    DoublyLinkedList<T> list;

public:

    void push(T element) {
        list.pushBack(element);
    }

    void pop() {
        list.popBack();
    }

    T back() {  // The program should display the value of the last element without removing it from the stack
        return list[list.length() - 1];
    }

    void display() {
        for(int i=0; i<list.length(); i++)
            cout<<list[i]<<"  ";
    }

    int size() {
        return list.length();
    }
};

int main() {

    //TEST
    cout<<"Stack:\n";
    Stack<int> s;

    s.push(1);
    s.push(2);
    s.push(3);
    s.push(4);
    s.push(5);
    s.display();
    s.pop();
    cout<<"\nafter pop back:\n";
    s.display();
    cout<<"\nback: "<<s.back();
    cout<<"\nsize: "<<s.size();

    cout<<"\n\nQueue:\n";
    Queue<int> q;

    q.push(11);
    q.push(22);
    q.push(33);
    q.push(44);
    q.push(55);
    q.display();
    q.pop();
    cout<<"\nafter pop front:\n";
    q.display();
    cout<<"\nfront: "<<q.front();
    cout<<"\nsize: "<<q.size();

    return 0;
}